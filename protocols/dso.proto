# Tektronix DSO 4000

InTerminator = LF CR;
OutTerminator = CR LF;
ReplyTimeout = 2000;
ReadTimeout = 5000;
LockTimeout = 8000;

# Setup, either on-demand when processed, but also automatically when connecting:
# Do not echo header in reply, but if you do, then use full name
# Get 10000 samples, 1 byte per sample
#
# Start this and the 'enabled' commands used at the start of a sequence
# of requests with \r\n to clear scope command queue
#
# Data encoding may use ASCII or RIBinary.
# Below, the 'curve' protocol element must be selected to match.
setup
{
  out "\r\n:HEAD OFF;:VERB ON;:DAT:STAR 1;:DAT:STOP 10000;:DAT:WID 1;:DAT:ENC RIBinary;";
  @init
  {
    out "\r\n:HEAD OFF;:VERB ON;:DAT:STAR 1;:DAT:STOP 10000;:DAT:WID 1;:DAT:ENC RIBinary;";
  }
}

# Is channel $1 enabled?
enabled
{
  out "\r\n:SEL:CH\$1?";
  in "%d";
}

# Enable/disable channel $1
enable
{
  out "\r\n:SEL:CH\$1 %d";
  @init
  {
    out "\r\n:SEL:CH\$1?";
    in "%d";
  }
}


# Binary (RIBinary) curve reply:
# '#5'    : 5 decimals for data size to follow
# '10000' : Number of data points
# <binary>: 10000 signed bytes of data
# CR/LR   : 2 more bytes for end of line
#
# Protocol based on help from Dirk Zimoch:
# Parse '#510000' verbatim,
# then waveform record repeats %r for NELM,
# followed by LF CR.
# Cannot use 'Terminator' because <binary> could contain anything.
# So stop after 'MaxInput'.
curve
{
  InTerminator="";
  MaxInput=10009;
  out ":DAT:SOU CH\$1;:CURV?";
  in "#510000%1r\n\r";
}

# Using ASCII, the Terminator ends a line, less chances of getting out of step
#curve
#{
#  Separator = ",";
#  out ":DAT:SOU CH\$1;:CURV?";
#  in "%d";
#}

# Info is returned as '"xxx"'.
# Use regex to get just 'xxx', sans quotes
info
{
  out ":DAT:SOU CH\$1;:WFMOutpre:WFID?";
  in '%.1/"(.*)"/';
}

# Scaling factor for X axis elements
xincr
{
  out ":DAT:SOU CH1;:WFMOUTPRE:XINCR?";
  in "%f";
}

# Scaling factor for channel $1 Y axis elements
mult
{
  out ":DAT:SOU CH\$1;:WFMOutpre:YMUlt?";
  in "%f";
}

